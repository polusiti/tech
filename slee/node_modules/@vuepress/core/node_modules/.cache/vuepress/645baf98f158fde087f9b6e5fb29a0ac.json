{"remainingRequest":"/home/higuc/polusiti-tech/slee/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/higuc/polusiti-tech/slee/docs/.vuepress/components/IndexBigImg.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/higuc/polusiti-tech/slee/docs/.vuepress/components/IndexBigImg.vue","mtime":1761321001137},{"path":"/home/higuc/polusiti-tech/slee/node_modules/cache-loader/dist/cjs.js","mtime":1761329323494},{"path":"/home/higuc/polusiti-tech/slee/node_modules/babel-loader/lib/index.js","mtime":1761329323866},{"path":"/home/higuc/polusiti-tech/slee/node_modules/cache-loader/dist/cjs.js","mtime":1761329323494},{"path":"/home/higuc/polusiti-tech/slee/node_modules/vue-loader/lib/index.js","mtime":1761329324398}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8vIOS4pOS4quWPmOmHj+WIhuWIq+aYr+iDjOaZr+WFg+e0oOeahCBjbGFzc+OAgeeUn+aIkOeahOeureWktCBjbGFzcwpjb25zdCBiYW5uZXIgPSAiYmFubmVyIjsKY29uc3QgYmFubmVyX2Fycm93ID0gImJhbm5lci1hcnJvdyI7CmV4cG9ydCBkZWZhdWx0IHsKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgLy8g5LiL6Z2i6YO95piv6YWN572u55qE6buY6K6k5YC877yM5bu66K6u5ZyoIHRoZW1lQ29uZmlnIOi/m+ihjOmFjee9ru+8jOWug+S7rOWwhuimhueblui/meS6m+WxnuaAp+WAvAogICAgICAgICAgICBuYXZDb2xvcjogMSwKICAgICAgICAgICAgc3dpdGNoTmF2Q29sb3I6IGZhbHNlLAogICAgICAgICAgICBiZ1RpbWVDb2xvcjogZmFsc2UsCiAgICAgICAgICAgIGJnVGltZUNvbG9yQXJyYXk6IFsKICAgICAgICAgICAgICAgICJ0cmFuc3BhcmVudCIsIC8vIOmAj+aYjgogICAgICAgICAgICAgICAgInJnYmEoMjU1LCAxNDgsIDQ4LCAuMikiLAogICAgICAgICAgICAgICAgInJnYmEoMCwgMCwgMCwgLjMpIiwKICAgICAgICAgICAgICAgICJyZ2JhKDAsIDAsIDAsIC41KSIsCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIGRlc2NGYWRlOiBmYWxzZSwKICAgICAgICAgICAgZGVzYzogW10sCiAgICAgICAgICAgIGRlc2NGYWRlSW5UaW1lOiAyMDAsCiAgICAgICAgICAgIGRlc2NGYWRlT3V0VGltZTogMTAwLAogICAgICAgICAgICBkZXNjTmV4dFRpbWU6IDgwMCwKICAgICAgICAgICAgZGVzY0ZvbnRTaXplOiAiMS40cmVtIiwKICAgICAgICAgICAgYnViYmxlOiBmYWxzZSwKICAgICAgICAgICAgYnViYmxlUG9zaXRpb246IDAsCiAgICAgICAgICAgIGJ1YmJsZU51bTogMjAwLAogICAgICAgICAgICBmYWRlSW5JbnRlcnZhbDogIiIsIC8vIOa3oeWFpeWumuaXtuWZqAogICAgICAgICAgICBmYWRlT3V0SW50ZXJ2YWw6ICIiLCAvLyDmt6Hlh7rlrprml7blmagKICAgICAgICB9OwogICAgfSwKICAgIG1vdW50ZWQoKSB7CiAgICAgICAgY29uc3QgYXJyb3cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChiYW5uZXJfYXJyb3cpOwogICAgICAgIGFycm93ICYmIGFycm93LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYXJyb3cpOwogICAgICAgIGxldCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgICAgIGEuaWQgPSBiYW5uZXJfYXJyb3c7CiAgICAgICAgYS5jbGFzc05hbWUgPSBiYW5uZXJfYXJyb3c7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShiYW5uZXIpWzBdPy5hcHBlbmQoYSk7CiAgICAgICAgbGV0IHRhcmdldEEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChiYW5uZXJfYXJyb3cpOwogICAgICAgIGlmICh0YXJnZXRBKSB7CiAgICAgICAgICAgIHRhcmdldEEuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoZSkgPT4gewogICAgICAgICAgICAgICAgLy8g5re75Yqg54K55Ye75LqL5Lu2CiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbEZuKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCgogICAgICAgIC8vIOWIneWni+WMlumFjee9rgogICAgICAgIHRoaXMuaW5pdENvbmZpZygpOwoKICAgICAgICAvLyDliJ3lp4vljJbnu4Tku7blip/og70KICAgICAgICBpZiAodGhpcy5iZ1RpbWVDb2xvcikgewogICAgICAgICAgICB0aGlzLmJnVGltZUNvbG9yQW5kVGlwKCk7CiAgICAgICAgfQogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICB0aGlzLm5vQmdCbHVyKCk7CiAgICAgICAgfSwgMTAwKTsKCiAgICAgICAgdGhpcy5ibHVyVGV4dCgpOwogICAgICAgIHRoaXMud2F0Y2hTY3JvbGwoKTsKCiAgICAgICAgaWYgKHRoaXMuZGVzY0ZhZGUpIHsKICAgICAgICAgICAgdGhpcy50ZXh0RmFkZUluQW5kT3V0KCk7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzLmJ1YmJsZSkgewogICAgICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgICAgICAgIGNhbnZhcy5pZCA9ICJjYW52YXMiOwogICAgICAgICAgICBjYW52YXMuc3R5bGUudG9wID0gdGhpcy5idWJibGVQb3NpdGlvbiArICIlIjsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShiYW5uZXIpWzBdPy5hcHBlbmQoY2FudmFzKTsKICAgICAgICAgICAgdGhpcy5jYW52YXNCdWJibGUoKTsKICAgICAgICB9CiAgICB9LAogICAgd2F0Y2g6IHsKICAgICAgICAkcm91dGUodG8sIGZyb20pIHsKICAgICAgICAgICAgLy8g54K55Ye75LiL5LiA6aG15ZCO77yM5b6A5LiL5ruR5Yqo77yM56e75Ye65aSn5Zu+CiAgICAgICAgICAgIGlmICh0by5wYXRoID09PSAiLyIgJiYgT2JqZWN0LmtleXModGhpcy4kcm91dGUucXVlcnkpLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tBcnJvdygpOwogICAgICAgICAgICAgICAgfSwgMjAwKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIC8vIOWIneWni+WMlumFjee9rgogICAgICAgIGluaXRDb25maWcoKSB7CiAgICAgICAgICAgIGlmICgKICAgICAgICAgICAgICAgIHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nICYmCiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLiR0aGVtZUNvbmZpZy5pbmRleEltZykubGVuZ3RoID4gMAogICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgIHRoaXMubmF2Q29sb3IgPQogICAgICAgICAgICAgICAgICAgIHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nLm5hdkNvbG9yID09PSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLm5hdkNvbG9yCiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcubmF2Q29sb3I7CiAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaE5hdkNvbG9yID0KICAgICAgICAgICAgICAgICAgICB0aGlzLiR0aGVtZUNvbmZpZy5pbmRleEltZy5zd2l0Y2hOYXZDb2xvciA9PT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5zd2l0Y2hOYXZDb2xvcgogICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nLnN3aXRjaE5hdkNvbG9yOwogICAgICAgICAgICAgICAgdGhpcy5iZ1RpbWVDb2xvciA9CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuYmdUaW1lQ29sb3IgPT09IHVuZGVmaW5lZAogICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuYmdUaW1lQ29sb3IKICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLiR0aGVtZUNvbmZpZy5pbmRleEltZy5iZ1RpbWVDb2xvcjsKICAgICAgICAgICAgICAgIHRoaXMuYmdUaW1lQ29sb3JBcnJheSA9CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuYmdUaW1lQ29sb3JBcnJheSA9PT0gdW5kZWZpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5iZ1RpbWVDb2xvckFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuYmdUaW1lQ29sb3JBcnJheTsKICAgICAgICAgICAgICAgIHRoaXMuZGVzY0ZhZGUgPQogICAgICAgICAgICAgICAgICAgIHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nLmRlc2NGYWRlID09PSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmRlc2NGYWRlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuZGVzY0ZhZGU7CiAgICAgICAgICAgICAgICB0aGlzLmRlc2MgPQogICAgICAgICAgICAgICAgICAgIHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nLmRlc2MgPT09IHVuZGVmaW5lZAogICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZGVzYwogICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nLmRlc2M7CiAgICAgICAgICAgICAgICB0aGlzLmRlc2NGb250U2l6ZSA9CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuZGVzY0ZvbnRTaXplID09PSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmRlc2NGb250U2l6ZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nLmRlc2NGb250U2l6ZTsKICAgICAgICAgICAgICAgIHRoaXMuZGVzY0ZhZGVJblRpbWUgPQogICAgICAgICAgICAgICAgICAgIHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nLmRlc2NGYWRlSW5UaW1lID09PSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmRlc2NGYWRlSW5UaW1lCiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuZGVzY0ZhZGVJblRpbWU7CiAgICAgICAgICAgICAgICB0aGlzLmRlc2NOZXh0VGltZSA9CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuZGVzY05leHRUaW1lID09PSB1bmRlZmluZWQKICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmRlc2NOZXh0VGltZQogICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuJHRoZW1lQ29uZmlnLmluZGV4SW1nLmRlc2NOZXh0VGltZTsKICAgICAgICAgICAgICAgIHRoaXMuYnViYmxlID0KICAgICAgICAgICAgICAgICAgICB0aGlzLiR0aGVtZUNvbmZpZy5pbmRleEltZy5idWJibGUgPT09IHVuZGVmaW5lZAogICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuYnViYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuYnViYmxlOwogICAgICAgICAgICAgICAgdGhpcy5idWJibGVQb3NpdGlvbiA9CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuYnViYmxlUG9zaXRpb24gPT09IHVuZGVmaW5lZAogICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuYnViYmxlUG9zaXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLiR0aGVtZUNvbmZpZy5pbmRleEltZy5idWJibGVQb3NpdGlvbjsKICAgICAgICAgICAgICAgIHRoaXMuYnViYmxlTnVtID0KICAgICAgICAgICAgICAgICAgICB0aGlzLiR0aGVtZUNvbmZpZy5pbmRleEltZy5idWJibGVOdW0gPT09IHVuZGVmaW5lZAogICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuYnViYmxlTnVtCiAgICAgICAgICAgICAgICAgICAgICAgIDogdGhpcy4kdGhlbWVDb25maWcuaW5kZXhJbWcuYnViYmxlTnVtOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvLyDngrnlh7vnrq3lpLTlkJHkuIvmu5HliqgKICAgICAgICBzY3JvbGxGbigpIHsKICAgICAgICAgICAgY29uc3Qgd2luZG93SCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYmFubmVyKVswXS5jbGllbnRIZWlnaHQ7IC8vIOiOt+WPlueql+WPo+mrmOW6pgogICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oewogICAgICAgICAgICAgICAgdG9wOiB3aW5kb3dILAogICAgICAgICAgICAgICAgYmVoYXZpb3I6ICJzbW9vdGgiLCAvLyDlubPmu5Hmu5rliqgKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICAvLyDop6blj5HkuIvmi4nmjInpkq4KICAgICAgICBjbGlja0Fycm93KCkgewogICAgICAgICAgICBjb25zdCBhcnJvdyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJiYW5uZXItYXJyb3ciKTsKICAgICAgICAgICAgaWYoYXJyb3cpewogICAgICAgICAgICAgICAgYXJyb3cuY2xpY2soKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgLy8g55uR5ZCs6aG16Z2i5rua5Yqo55qE5Zue6LCDCiAgICAgICAgd2F0Y2hTY3JvbGwoKSB7CiAgICAgICAgICAgIGNvbnN0IHdpbmRvd0ggPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGJhbm5lcilbMF0/LmNsaWVudEhlaWdodCA/PyB3aW5kb3cuaW5uZXJIZWlnaHQ7IC8vIOiOt+WPlueql+WPo+mrmOW6pgogICAgICAgICAgICB3aW5kb3cub25zY3JvbGwgPSAoKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA8IHdpbmRvd0gpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmJsdXJUZXh0KHRoaXMubmF2Q29sb3IpOwogICAgICAgICAgICAgICAgICAgIHRoaXMubm9CZ0JsdXIoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3dpdGNoTmF2Q29sb3IgJiYgdGhpcy5uYXZDb2xvciA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJsdXJUZXh0KDIpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zd2l0Y2hOYXZDb2xvciAmJiB0aGlzLm5hdkNvbG9yID09PSAyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmx1clRleHQoMSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMuYmdCbHVyKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICAvLyDlr7zoiKrmoI/mgaLlpI3ljp/kuLvpopjmoLflvI8KICAgICAgICBiZ0JsdXIoKSB7CiAgICAgICAgICAgIGxldCBuYXZiYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJuYXZiYXIiKVswXTsKICAgICAgICAgICAgaWYgKG5hdmJhcikgewogICAgICAgICAgICAgICAgbmF2YmFyLmNsYXNzTmFtZSA9ICJuYXZiYXIgYmx1ciI7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8vIOWvvOiIquagj+mAj+aYjgogICAgICAgIG5vQmdCbHVyKCkgewogICAgICAgICAgICBsZXQgbmF2YmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgibmF2YmFyIilbMF07CiAgICAgICAgICAgIGlmIChuYXZiYXIpIHsKICAgICAgICAgICAgICAgIG5hdmJhci5jbGFzc05hbWUgPSAibmF2YmFyIG5hdmJhcjEgYmx1ciI7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8vIOWvvOiIquagj+eahOWtl+S9k+minOiJsgogICAgICAgIGJsdXJUZXh0KG5hdkNvbG9yID0gdGhpcy5uYXZDb2xvcikgewogICAgICAgICAgICBsZXQgdGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJzaXRlLW5hbWUiKVswXTsKICAgICAgICAgICAgbGV0IHNlYXJjaCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInNlYXJjaC1ib3giKVswXTsKICAgICAgICAgICAgbGV0IG5hdiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIm5hdi1saW5rcyIpWzBdOwogICAgICAgICAgICBpZiAobmF2Q29sb3IgPT09IDEpIHsKICAgICAgICAgICAgICAgIGlmICh0aXRsZSkgewogICAgICAgICAgICAgICAgICAgIHRpdGxlLmNsYXNzTmFtZSA9ICJzaXRlLW5hbWUgY2FuLWhpZGUiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG5hdikgewogICAgICAgICAgICAgICAgICAgIG5hdi5jbGFzc05hbWUgPSAibmF2LWxpbmtzIGNhbi1oaWRlIjsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoKSB7CiAgICAgICAgICAgICAgICAgICAgc2VhcmNoLmNsYXNzTmFtZSA9ICJzZWFyY2gtYm94IjsKCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9IGVsc2UgaWYgKG5hdkNvbG9yID09PSAyKSB7CiAgICAgICAgICAgICAgICBpZiAodGl0bGUpIHsKICAgICAgICAgICAgICAgICAgICB0aXRsZS5jbGFzc05hbWUgPSAic2l0ZS1uYW1lIHNpdGUtbmFtZTEgY2FuLWhpZGUiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG5hdikgewogICAgICAgICAgICAgICAgICAgIG5hdi5jbGFzc05hbWUgPSAibmF2LWxpbmtzIG5hdi1saW5rczEgY2FuLWhpZGUiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHNlYXJjaCkgewogICAgICAgICAgICAgICAgICAgIHNlYXJjaC5jbGFzc05hbWUgPSAic2VhcmNoLWJveCBzZWFyY2gtYm94MSI7CgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAvLyDog4zmma/oibLpmo/ml7bpl7Tlj5jljJbvvIzml7bpl7Tmj5DnpLrmoYblhoXlrrnpmo/ml7bpl7Tlj5jljJYKICAgICAgICBiZ1RpbWVDb2xvckFuZFRpcCgpIHsKICAgICAgICAgICAgdmFyIGhvdXJzID0gbmV3IERhdGUoKS5nZXRIb3VycygpOwogICAgICAgICAgICB2YXIgbWludXRlcyA9IG5ldyBEYXRlKCkuZ2V0TWludXRlcygpOwogICAgICAgICAgICB2YXIgc2Vjb25kcyA9IG5ldyBEYXRlKCkuZ2V0U2Vjb25kcygpOwogICAgICAgICAgICBob3VycyA9IGhvdXJzIDwgMTAgPyAiMCIgKyBob3VycyA6IGhvdXJzOwogICAgICAgICAgICBtaW51dGVzID0gbWludXRlcyA8IDEwID8gIjAiICsgbWludXRlcyA6IG1pbnV0ZXM7CiAgICAgICAgICAgIHNlY29uZHMgPSBzZWNvbmRzIDwgMTAgPyAiMCIgKyBzZWNvbmRzIDogc2Vjb25kczsKICAgICAgICAgICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICBkaXYuY2xhc3NOYW1lID0gImJhbm5lci1jb2xvciI7CiAgICAgICAgICAgIGlmIChob3VycyA+PSA2ICYmIGhvdXJzIDwgOSkgewogICAgICAgICAgICAgICAgYWRkVGlwKAogICAgICAgICAgICAgICAgICAgIGDjgYrjga/jgojjgYbjgZTjgZbjgYTjgb7jgZl+fu+8jOePvuWcqCAke2hvdXJzfToke21pbnV0ZXN9OiR7c2Vjb25kc33vvIzmnJ3jgZTjga/jgpPjgpLpo5/jgbnjgb7jgZfjgZ/jgYvvvJ/wn42UYCwKICAgICAgICAgICAgICAgICAgICAiaW5mbyIsCiAgICAgICAgICAgICAgICAgICAgNTAsCiAgICAgICAgICAgICAgICAgICAgNDAwMAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA+PSA5ICYmIGhvdXJzIDwgMTIpIHsKICAgICAgICAgICAgICAgIGFkZFRpcCgKICAgICAgICAgICAgICAgICAgICBg44GK44Gv44KI44GG44GU44GW44GE44G+44GZfn7vvIznj77lnKggJHtob3Vyc306JHttaW51dGVzfToke3NlY29uZHN977yM44K144Oc44KJ44Gq44GE44KI44GG44Gr5rCX44KS44Gk44GR44Gm44GP44Gg44GV44GE8J+Qn35+YCwKICAgICAgICAgICAgICAgICAgICAiaW5mbyIsCiAgICAgICAgICAgICAgICAgICAgNTAsCiAgICAgICAgICAgICAgICAgICAgNDAwMAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA+PSAxMiAmJiBob3VycyA8IDEzKSB7CiAgICAgICAgICAgICAgICBhZGRUaXAoCiAgICAgICAgICAgICAgICAgICAgYOOBk+OCk+OBq+OBoeOBr35+77yM54++5ZyoICR7aG91cnN9OiR7bWludXRlc306JHtzZWNvbmRzfe+8jOOBiuaYvOOBruOBlOmjr+OBruaZgumWk+OBp+OBmfCfjZp+fmAsCiAgICAgICAgICAgICAgICAgICAgImluZm8iLAogICAgICAgICAgICAgICAgICAgIDUwLAogICAgICAgICAgICAgICAgICAgIDQwMDAKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTMgJiYgaG91cnMgPCAxNCkgewogICAgICAgICAgICAgICAgYWRkVGlwKAogICAgICAgICAgICAgICAgICAgIGDjgZPjgpPjgavjgaHjga9+fu+8jOePvuWcqCAke2hvdXJzfToke21pbnV0ZXN9OiR7c2Vjb25kc33vvIzlv5njgZfjgYTljYjlvozjgoLpganluqbjgavkvJHmhqnjgZfjgabjgY/jgaDjgZXjgYTwn5i0fn5gLAogICAgICAgICAgICAgICAgICAgICJpbmZvIiwKICAgICAgICAgICAgICAgICAgICA1MCwKICAgICAgICAgICAgICAgICAgICA0MDAwCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzID49IDE0ICYmIGhvdXJzIDwgMTcpIHsKICAgICAgICAgICAgICAgIGFkZFRpcCgKICAgICAgICAgICAgICAgICAgICBg44GT44KT44Gr44Gh44Gvfn7vvIznj77lnKggJHtob3Vyc306JHttaW51dGVzfToke3NlY29uZHN977yM5Y2I5b6M44KC6aCR5by144Gj44Gm44GP44Gg44GV44GE8J+Qn35+YCwKICAgICAgICAgICAgICAgICAgICAiaW5mbyIsCiAgICAgICAgICAgICAgICAgICAgNTAsCiAgICAgICAgICAgICAgICAgICAgNDAwMAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA+PSAxNyAmJiBob3VycyA8IDE5KSB7CiAgICAgICAgICAgICAgICBhZGRUaXAoCiAgICAgICAgICAgICAgICAgICAgYOWkleaWueOBq+OBquOCiuOBvuOBl+OBn35+77yM54++5ZyoICR7aG91cnN9OiR7bWludXRlc306JHtzZWNvbmRzfe+8jOWklemjn+OBrua6luWCmeOCkuOBl+OBvuOBl+OCh+OBhvCfpZfwn42Wfn5gLAogICAgICAgICAgICAgICAgICAgICJpbmZvIiwKICAgICAgICAgICAgICAgICAgICA1MCwKICAgICAgICAgICAgICAgICAgICA0MDAwCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzID49IDE5ICYmIGhvdXJzIDwgMjApIHsKICAgICAgICAgICAgICAgIGFkZFRpcCgKICAgICAgICAgICAgICAgICAgICBg44GT44KT44Gw44KT44Gvfn7vvIznj77lnKggJHtob3Vyc306JHttaW51dGVzfToke3NlY29uZHN977yM5LiA5pel44GK55ay44KM5qeY44Gn44GX44Gf77yM6YGL5YuV44KC44GX44G+44GX44KH44GG8J+Pg+KAjeKZgu+4j35+YCwKICAgICAgICAgICAgICAgICAgICAiaW5mbyIsCiAgICAgICAgICAgICAgICAgICAgNTAsCiAgICAgICAgICAgICAgICAgICAgNDAwMAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA+PSAyMCAmJiBob3VycyA8IDIzKSB7CiAgICAgICAgICAgICAgICBhZGRUaXAoCiAgICAgICAgICAgICAgICAgICAgYOOBk+OCk+OBsOOCk+OBr35+77yM54++5ZyoICR7aG91cnN9OiR7bWludXRlc306JHtzZWNvbmRzfe+8jOWknOOCguOBk+OBo+OBneOCiuWLieW8t+OBl+OBvuOBl+OCh+OBhvCfkq9+fmAsCiAgICAgICAgICAgICAgICAgICAgImluZm8iLAogICAgICAgICAgICAgICAgICAgIDUwLAogICAgICAgICAgICAgICAgICAgIDQwMDAKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMjMgJiYgaG91cnMgPCAyNCkgewogICAgICAgICAgICAgICAgYWRkVGlwKAogICAgICAgICAgICAgICAgICAgIGDjgZPjgpPjgbDjgpPjga9+fu+8jOePvuWcqCAke2hvdXJzfToke21pbnV0ZXN9OiR7c2Vjb25kc33vvIzjgZ3jgo3jgZ3jgo3jgYrpoqjlkYLjgavlhaXjgaPjgablr53jgb7jgZfjgofjgYbwn5uA8J+lsfCfmKp+fmAsCiAgICAgICAgICAgICAgICAgICAgImluZm8iLAogICAgICAgICAgICAgICAgICAgIDUwLAogICAgICAgICAgICAgICAgICAgIDQwMDAKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMCAmJiBob3VycyA8IDYpIHsKICAgICAgICAgICAgICAgIGFkZFRpcCgKICAgICAgICAgICAgICAgICAgICBg5aSc5pu044GL44GX44GX44Gq44GE44Gnfn7vvIznj77lnKggJHtob3Vyc306JHttaW51dGVzfToke3NlY29uZHN977yM5pep44GP5a+d44Gm77yM5pyd5pel44KS5LiA57eS44Gr5qW944GX44G/44G+44GX44KH44GGfn7wn5iH8J+bj2AsCiAgICAgICAgICAgICAgICAgICAgImluZm8iLAogICAgICAgICAgICAgICAgICAgIDUwLAogICAgICAgICAgICAgICAgICAgIDQwMDAKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYmFubmVyKVswXT8ucGFyZW50Tm9kZSkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShiYW5uZXIpWzBdLnBhcmVudE5vZGUuYXBwZW5kKGRpdik7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIC8vIOWtl+S9k+a3oeWFpea3oeWHugogICAgICAgIHRleHRGYWRlSW5BbmRPdXQoCiAgICAgICAgICAgIGRlc2MgPSB0aGlzLmRlc2MsIC8vIOaWh+Wtl+aPj+i/sAogICAgICAgICAgICBkZXNjRm9udFNpemUgPSB0aGlzLmRlc2NGb250U2l6ZSwgLy8g5a2X5L2T5aSn5bCPCiAgICAgICAgICAgIGRlc2NGYWRlSW5UaW1lID0gdGhpcy5kZXNjRmFkZUluVGltZSwgLy8g5reh5YWl5pe26Ze0CiAgICAgICAgICAgIGRlc2NGYWRlT3V0VGltZSA9IHRoaXMuZGVzY0ZhZGVPdXRUaW1lLCAvLyDmt6Hlh7rml7bpl7QKICAgICAgICAgICAgZGVzY05leHRUaW1lID0gdGhpcy5kZXNjTmV4dFRpbWUgLy8g5LiL5LiA5Liq5o+P6L+w5Ye6546w5pe26Ze0CiAgICAgICAgKSB7CiAgICAgICAgICAgIGxldCBkZXNjRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImRlc2NyaXB0aW9uIilbMF07CgogICAgICAgICAgICBpZiAoZGVzY0VsZW1lbnQpIHsKICAgICAgICAgICAgICAgIC8vIOmdnummlumhteS4jeinpuWPkQogICAgICAgICAgICAgICAgZGVzY0VsZW1lbnQuc3R5bGUuZm9udFNpemUgPSBkZXNjRm9udFNpemU7CiAgICAgICAgICAgICAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsgLy8g5Yib5bu6IHwg55qE5YWD57SgCiAgICAgICAgICAgICAgICBzcGFuLmNsYXNzTmFtZSA9ICJ0eXBlZCI7CiAgICAgICAgICAgICAgICBzcGFuLmlubmVySFRNTCA9ICJ8IjsKICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7IC8vIOS4uiBkZXNjIOeahOmVv+W6puacjeWKoQogICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IDA7IC8vIOS4uuaVsOe7hOacjeWKoQogICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gZGVzY0VsZW1lbnQuaW5uZXJUZXh0OyAvLyDlhYjlj5bpu5jorqTlgLwKICAgICAgICAgICAgICAgIGRlc2NFbGVtZW50LmlubmVyVGV4dCA9ICIiOyAvLyDmuIXnqbogZGVzYwogICAgICAgICAgICAgICAgZGVzY0VsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpKTsgLy8g5Yib5bu6IGRlc2Mg5omA5Zyo55qE5paw5YWD57SgCiAgICAgICAgICAgICAgICBzcGFuICYmIGRlc2NFbGVtZW50LmFwcGVuZENoaWxkKHNwYW4pOyAvLyDmt7vliqAgfCDnmoTlhYPntKAKICAgICAgICAgICAgICAgIC8vIOWIneWni+WMlui/reS7owogICAgICAgICAgICAgICAgdGhpcy5mYWRlSW5JbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICBmYWRlSW4oKTsKICAgICAgICAgICAgICAgIH0sIGRlc2NGYWRlSW5UaW1lKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGxldCBoZXJvID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiaGVybyIpWzBdOwogICAgICAgICAgICAgICAgZGVzY0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJwIik7CiAgICAgICAgICAgICAgICBkZXNjRWxlbWVudCAmJiAoZGVzY0VsZW1lbnQuY2xhc3NOYW1lID0gImRlc2NyaXB0aW9uIik7CiAgICAgICAgICAgICAgICBkZXNjRWxlbWVudCAmJiBoZXJvICYmIGhlcm8uYXBwZW5kQ2hpbGQoZGVzY0VsZW1lbnQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIOa3oeWFpeWbnuiwgwogICAgICAgICAgICBsZXQgZmFkZUluID0gKCkgPT4gewogICAgICAgICAgICAgICAgaWYgKGRlc2NFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5hbmltYXRpb24gPSAibm9uZSI7IC8vIOa3oeWFpeaXtu+8jHwg5YWJ5qCH5LiN5YWB6K646Zeq54OBCiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2MgaW5zdGFuY2VvZiBBcnJheSAmJiBkZXNjLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8g5aaC5p6c5pivIHRoZW1lQ29uZmlnIOS8oOadpeeahOaVsOe7hAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9IGRlc2NbbGVuZ3RoXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZGVzY0VsZW1lbnQuZmlyc3RDaGlsZC5pbm5lclRleHQgPSBkZXNjcmlwdGlvbi5zdWJzdHJpbmcoMCwgaW5kZXgrKyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gZGVzY3JpcHRpb24ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5mYWRlSW5JbnRlcnZhbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4uc3R5bGUuYW5pbWF0aW9uID0gInR5cGVkQmxpbmsgMXMgaW5maW5pdGUiOyAvLyDmt6HlhaXnu5PmnZ/vvIx8IOWFieagh+WFgeiuuOmXqueDgQogICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFkZU91dEludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGVPdXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlc2NGYWRlT3V0VGltZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlc2NOZXh0VGltZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICAvLyDmt6Hlh7rlm57osIMKICAgICAgICAgICAgbGV0IGZhZGVPdXQgPSAoKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkgewogICAgICAgICAgICAgICAgICAgIHNwYW4uc3R5bGUuYW5pbWF0aW9uID0gIm5vbmUiOyAvLyDmt6Hlh7rml7bvvIx8IOWFieagh+S4jeWFgeiuuOmXqueDgQogICAgICAgICAgICAgICAgICAgIGRlc2NFbGVtZW50LmZpcnN0Q2hpbGQuaW5uZXJUZXh0ID0gZGVzY3JpcHRpb24uc3Vic3RyaW5nKDAsIGluZGV4LS0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuZmFkZU91dEludGVydmFsKTsKICAgICAgICAgICAgICAgICAgICBzcGFuLnN0eWxlLmFuaW1hdGlvbiA9ICJ0eXBlZEJsaW5rIDFzIGluZmluaXRlIjsgLy8g5reh5Ye657uT5p2f77yMfCDlhYnmoIflhYHorrjpl6rng4EKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoKys7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW5ndGggPj0gZGVzYy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IDA7IC8vIGRlc2Mg5bGV56S65a6M77yM6YeN5paw5byA5aeL6K6h5pWwCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWRlSW5JbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhZGVJbigpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCBkZXNjRmFkZUluVGltZSk7CiAgICAgICAgICAgICAgICAgICAgfSwgZGVzY05leHRUaW1lKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9LAogICAgICAgIC8vIOawlOazoeaViOaenAogICAgICAgIGNhbnZhc0J1YmJsZShidWJibGVOdW0gPSB0aGlzLmJ1YmJsZU51bSkgewogICAgICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNhbnZhcyIpOwogICAgICAgICAgICB2YXIgY3h0ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CgogICAgICAgICAgICBmdW5jdGlvbiBEb3QoKSB7CiAgICAgICAgICAgICAgICB0aGlzLmFsaXZlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMueCA9IE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aCk7CiAgICAgICAgICAgICAgICB0aGlzLnkgPSBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0KTsKICAgICAgICAgICAgICAgIHRoaXMuZGlhbWV0ZXIgPSBNYXRoLnJhbmRvbSgpICogMTAuODsKICAgICAgICAgICAgICAgIHRoaXMuQ29sb3JEYXRhID0gewogICAgICAgICAgICAgICAgICAgIFJlZDogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMjU1KSwKICAgICAgICAgICAgICAgICAgICBHcmVlbjogTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMjU1KSwKICAgICAgICAgICAgICAgICAgICBCbHVlOiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAyNTUpLAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHRoaXMuYWxwaGEgPSAwLjU7CiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID0KICAgICAgICAgICAgICAgICAgICAicmdiYSgiICsKICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbG9yRGF0YS5SZWQgKwogICAgICAgICAgICAgICAgICAgICIsICIgKwogICAgICAgICAgICAgICAgICAgIHRoaXMuQ29sb3JEYXRhLkdyZWVuICsKICAgICAgICAgICAgICAgICAgICAiLCIgKwogICAgICAgICAgICAgICAgICAgIHRoaXMuQ29sb3JEYXRhLkJsdWUgKwogICAgICAgICAgICAgICAgICAgICIsIiArCiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHBoYSArCiAgICAgICAgICAgICAgICAgICAgIikiOwogICAgICAgICAgICAgICAgdGhpcy52ZWxvY2l0eSA9IHsKICAgICAgICAgICAgICAgICAgICB4OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAtMSA6IDEpICogTWF0aC5yYW5kb20oKSAqIDAuNywKICAgICAgICAgICAgICAgICAgICB5OiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgPCAwLjUgPyAtMSA6IDEpICogTWF0aC5yYW5kb20oKSAqIDAuNywKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIERvdC5wcm90b3R5cGUgPSB7CiAgICAgICAgICAgICAgICBEcmF3OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY3h0LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7CiAgICAgICAgICAgICAgICAgICAgY3h0LmJlZ2luUGF0aCgpOwogICAgICAgICAgICAgICAgICAgIGN4dC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMuZGlhbWV0ZXIsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgY3h0LmZpbGwoKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBVcGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hbHBoYSA8IDAuOCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFscGhhICs9IDAuMDE7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInJnYmEoIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbG9yRGF0YS5SZWQgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkNvbG9yRGF0YS5HcmVlbiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLCIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5Db2xvckRhdGEuQmx1ZSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLCIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbHBoYSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiKSI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRoaXMueCArPSB0aGlzLnZlbG9jaXR5Lng7CiAgICAgICAgICAgICAgICAgICAgdGhpcy55ICs9IHRoaXMudmVsb2NpdHkueTsKICAgICAgICAgICAgICAgICAgICBpZiAoCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueCA+IGNhbnZhcy53aWR0aCArIDUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy54IDwgMCAtIDUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ID4gY2FudmFzLmhlaWdodCArIDUgfHwKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55IDwgMCAtIDUKICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGl2ZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBFdmVudCA9IHsKICAgICAgICAgICAgICAgIHJBcnJheTogW10sCiAgICAgICAgICAgICAgICBJbml0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7CiAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGJ1YmJsZU51bTsgeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuckFycmF5LnB1c2gobmV3IERvdCgpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5VcGRhdGUoKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBEcmF3OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY3h0LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpOwogICAgICAgICAgICAgICAgICAgIHRoaXMuckFycmF5LmZvckVhY2goZnVuY3Rpb24gKGRvdCkgewogICAgICAgICAgICAgICAgICAgICAgICBkb3QuRHJhdygpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGlmIChFdmVudC5yQXJyYXkubGVuZ3RoIDwgYnViYmxlTnVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSBFdmVudC5yQXJyYXkubGVuZ3RoOyB4IDwgYnViYmxlTnVtOyB4KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50LnJBcnJheS5wdXNoKG5ldyBEb3QoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgRXZlbnQuckFycmF5LmZvckVhY2goZnVuY3Rpb24gKGRvdCkgewogICAgICAgICAgICAgICAgICAgICAgICBkb3QuVXBkYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgRXZlbnQuckFycmF5ID0gRXZlbnQuckFycmF5LmZpbHRlcihmdW5jdGlvbiAoZG90KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb3QuYWxpdmU7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgRXZlbnQuRHJhdygpOwogICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShFdmVudC5VcGRhdGUpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfTsKICAgICAgICAgICAgd2luZG93Lm9ucmVzaXplID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgRXZlbnQuckFycmF5ID0gW107CiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDsKICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIEV2ZW50LkluaXQoKTsKICAgICAgICB9LAogICAgfSwKICAgIC8vIOmYsuatoumHjeWGmee8luivkeaXtu+8jOWvvOiHtOWumuaXtuWZqOWPoOWKoOmXrumimAogICAgYmVmb3JlTW91bnQoKSB7CiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmZhZGVJbkludGVydmFsKTsKICAgICAgICBjbGVhckludGVydmFsKHRoaXMuZmFkZU91dEludGVydmFsKTsKICAgIH0sCiAgICBiZWZvcmVEZXN0cm95KCkgewogICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5mYWRlSW5JbnRlcnZhbCk7CiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmZhZGVPdXRJbnRlcnZhbCk7CiAgICB9LAp9OwoKLyoqCiAqIOa3u+WKoOa2iOaBr+aPkOekugogKiBjb250ZW5077ya5YaF5a65CiAqIHR5cGXvvJrlvLnnqpfnsbvlnovvvIh0aXDjgIFzdWNjZXNz44CBd2FybmluZ+OAgWRhbmdlcu+8iQogKiBzdGFydEhlaWdodO+8muesrOS4gOS4quW8ueeql+eahOmrmOW6pu+8jOm7mOiupCA1MAogKiBkaWVUaW1l77ya5by556qX5raI5aSx5pe26Ze077yI5q+r56eS77yJ77yM6buY6K6kIDMwMDAg5q+r56eSCiAqCiAqIOWcqCBoZWFkIOmHjOa3u+WKoOWbvuaghyBsaW5rIOWcsOWdgO+8mmh0dHBzOi8vYXQuYWxpY2RuLmNvbS90L2ZvbnRfMzExNDk3OF9xZTBiMzlubzc2LmNzcwogKi8KZnVuY3Rpb24gYWRkVGlwKGNvbnRlbnQsIHR5cGUsIHN0YXJ0SGVpZ2h0ID0gNTAsIGRpZVRpbWUgPSAzMDAwKSB7CiAgICB2YXIgdGlwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiLmdsb2JhbC10aXAiKTsKICAgIHZhciB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICAvLyDojrflj5bmnIDlkI7mtojmga/mj5DnpLrlhYPntKDnmoTpq5jluqYKICAgIHZhciB0b3AgPSB0aXAubGVuZ3RoID09PSAwID8gMCA6IHRpcFt0aXAubGVuZ3RoIC0gMV0uZ2V0QXR0cmlidXRlKCJkYXRhLXRvcCIpOwogICAgLy8g5aaC5p6c5Lqn55Sf5Lik5Liq5Lul5LiK55qE5raI5oGv5o+Q56S677yM5YiZ5Ye6546w5Zyo5LiK5LiA5Liq5o+Q56S655qE5LiL6Z2i77yM5Y2z6auY5bqm5re75Yqg77yM5ZCm5YiZ6buY6K6kIDUwCiAgICB2YXIgbGFzdFRvcCA9CiAgICAgICAgcGFyc2VJbnQodG9wKSArCiAgICAgICAgKHRpcC5sZW5ndGggIT0gMCA/IHRpcFt0aXAubGVuZ3RoIC0gMV0ub2Zmc2V0SGVpZ2h0ICsgMTcgOiBzdGFydEhlaWdodCk7CgogICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgZGl2LmNsYXNzTmFtZSA9IGBnbG9iYWwtdGlwIHRpcC0ke3R5cGV9ICR7dGltZX1gOwogICAgZGl2LnN0eWxlLnRvcCA9IHBhcnNlSW50KHRvcCkgKyAicHgiOwogICAgZGl2LnNldEF0dHJpYnV0ZSgiZGF0YS10b3AiLCBsYXN0VG9wKTsKICAgIGlmICh0eXBlID09PSAiaW5mbyIgfHwgdHlwZSA9PT0gMSkgewogICAgICAgIGRpdi5pbm5lckhUTUwgPSBgPGkgY2xhc3M9Imljb25mb250IGljb24taW5mbyBpY29uIj48L2k+PHAgY2xhc3M9InRpcC1pbmZvLWNvbnRlbnQiPiR7Y29udGVudH08L3A+YDsKICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gInN1Y2Nlc3MiIHx8IHR5cGUgPT09IDIpIHsKICAgICAgICBkaXYuaW5uZXJIVE1MID0gYDxpIGNsYXNzPSJpY29uZm9udCBpY29uLWRhZ291eW91cXVhbiBpY29uIj48L2k+PHAgY2xhc3M9InRpcC1zdWNjZXNzLWNvbnRlbnQiPiR7Y29udGVudH08L3A+YDsKICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gImRhbmdlciIgfHwgdHlwZSA9PT0gMykgewogICAgICAgIGRpdi5pbm5lckhUTUwgPSBgPGkgY2xhc3M9Imljb25mb250IGljb24tY3Vvd3UgaWNvbiI+PC9pPjxwIGNsYXNzPSJ0aXAtZGFuZ2VyLWNvbnRlbnQiPiR7Y29udGVudH08L3A+YDsKICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gIndhcm5pbmciIHx8IHR5cGUgPT09IDQpIHsKICAgICAgICBkaXYuaW5uZXJIVE1MID0gYDxpIGNsYXNzPSJpY29uZm9udCBpY29uLWdhbnRhbmhhbyBpY29uIj48L2k+PHAgY2xhc3M9InRpcC13YXJuaW5nLWNvbnRlbnQiPiR7Y29udGVudH08L3A+YDsKICAgIH0KICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTsKCiAgICBsZXQgdGltZVRpcCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUodGltZSlbMF07CiAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICB0aW1lVGlwLnN0eWxlLnRvcCA9IHBhcnNlSW50KGxhc3RUb3ApICsgInB4IjsKICAgICAgICB0aW1lVGlwLnN0eWxlLm9wYWNpdHkgPSAiMSI7CiAgICB9LCAxMCk7CgogICAgLy8g5raI5oGv5o+Q56S6IGRpZVRpbWUg56eS5ZCO6ZqQ6JeP5bm26KKr5Yig6ZmkCiAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICB0aW1lVGlwLnN0eWxlLnRvcCA9ICIwcHgiOwogICAgICAgIHRpbWVUaXAuc3R5bGUub3BhY2l0eSA9ICIwIjsKCiAgICAgICAgLy8g5LiL6Z2i55qE5omA5pyJ5YWD57Sg5Zue5Yiw5ZCE6Ieq5pu+57uP55qE5Ye65Y+R54K5CiAgICAgICAgdmFyIGFsbFRpcEVsZW1lbnQgPSBuZXh0QWxsVGlwRWxlbWVudCh0aW1lVGlwKTsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbFRpcEVsZW1lbnQubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIG5leHQgPSBhbGxUaXBFbGVtZW50W2ldOwogICAgICAgICAgICB2YXIgdG9wID0KICAgICAgICAgICAgICAgIHBhcnNlSW50KG5leHQuZ2V0QXR0cmlidXRlKCJkYXRhLXRvcCIpKSAtIG5leHQub2Zmc2V0SGVpZ2h0IC0gMTc7CiAgICAgICAgICAgIG5leHQuc2V0QXR0cmlidXRlKCJkYXRhLXRvcCIsIHRvcCk7CiAgICAgICAgICAgIG5leHQuc3R5bGUudG9wID0gdG9wICsgInB4IjsKICAgICAgICB9CiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgIHRpbWVUaXAucmVtb3ZlKCk7CiAgICAgICAgfSwgNTAwKTsKICAgIH0sIGRpZVRpbWUpOwp9CgovKioKICog6I635Y+W5ZCO6Z2i55qE5YWE5byf5YWD57SgCiAqLwpmdW5jdGlvbiBuZXh0QWxsVGlwRWxlbWVudChlbGVtKSB7CiAgICB2YXIgciA9IFtdOwogICAgdmFyIG4gPSBlbGVtOwogICAgZm9yICg7IG47IG4gPSBuLm5leHRTaWJsaW5nKSB7CiAgICAgICAgaWYgKG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSkgewogICAgICAgICAgICByLnB1c2gobik7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHI7Cn0K"},null]}